\begin{document}
\title{Camera ONB}
\section{Camera : ONB}

\begin{script}
time = new doubleanimator(1.0);
cam = new camera([-17.711,0.04,13.254] , [-10.678,-0.058,8.314] );
a = new axis3d();
campos = new point3d("C",-4,-4,1);
camdir = new vector3d("l",1,0,0);
raycam = new raycam3d(campos,camdir );

SC=new point3d("C_1",7,1.25,2);
SC2=new point3d("C_2",7,-4,1);
r = 1.5;
r2 = 2.5;
s1 = new sphere3d("s1",SC,r);
s1.setSphereStyleName("yellowCell");
raycam.addMesh(s1);
s2 = new sphere3d("s2",SC2,r2);
s2.setSphereStyleName("boxLab2");
raycam.addMesh(s2);
px = 10.0;
py = 5.0;
pxslider = new slider("",px,[0,31],[100,60],320.0,EAST);
pxslider.setLabel("\red{px} : {#px}");
pxslider.addSnapsEvery(1.0);
pyslider = new slider("",py,[0,17],[100,30],180,EAST);
pyslider.setLabel("\green{py} : {#py}");
pyslider.addSnapsEvery(1.0);
raycam.setRayPx(px);
raycam.setRayPy(py);
\end{script}


\begin{picture3d}
\dimension{1300,640}
\begin{part}
\begin{text}
In the introduction we use the three vectors of the camera system to create the world rays. This is
 in fact an orthonormal basis: \\{$raycam} = {&raycam'&(ccs)}. 
\end{text}
\include{cam,a,campos,s2,SC,s1,SC2,raycam,pxslider,pyslider}
\end{part}

\begin{part}
\begin{text}
This orthonormal basis {$raycam} defines the rotation and position of the camera in \blue{world space}.
\\A very important point to understand is that this ONB transform \blue{local} camera points and vectors
 to \blue{world} space.
\\ \\â‡’ Guess what, the camera rays are defined in \blue{local} camera space and need to be transformed
 to \blue{world} space.
\end{text}
\end{part}

\begin{part}
\begin{text}
This orthonormal basis {$raycam} defines the rotation and position of the camera in \blue{world space}. 
\end{text}
\end{part}


\end{picture3d}
\end{document}
