\begin{document}
\title{Vector3 class}
\section{Vector3 class}

\begin{script}
p = new point3d("p",0,0,0);
x=1;
y=2;
z=3;
p1 = new point3d("p1",x,y,z);
m = length(p1);
pn = p1 / m;
pn.setCaption("v_N");

v1 = new vector3d("v_1",1.0,2.0,2.0);
v1.setStyleName("xAxis");
v2 = new vector3d("v_2",3.0,1.0,1.0);
v2.setStyleName("yAxis");
dp = dot(v1,v2);

sm = x^2 + y^2 + z^2;

\end{script}

\begin{listing}{language=cpp,width=900,title=raytracer_math/Vector3.h}
\begin{code}
#pragma once
namespace DAE
{
	class Vector3
	{
	public:
		Vector3()=default;
		Vector3(float x, float y, float z);
		Vector3(Vector3 from, Vector3 to);

		void Set(float x, float y, float z);
		float Magnitude() const;
		float SqrMagnitude() const;
		void Normalize();
		Vector3 Normalized() const;

		static float Dot(const Vector3& v1, const Vector3& v2);
	private:
		float m_X{}, m_Y{}, m_Z{};
	};
}
\end{code}

\begin{part}
\begin{text}
First of all, the \type{Vector3} class will be placed in the \sourcecode{DAE} namespace.
\end{text}
\include{1-3,21}
\end{part}

\begin{part}
\begin{text}
As a next stap we declare the \type{Vector3} \sourcecode{class}. 
\end{text}
\include{4-6,20}
\end{part}

\begin{part}
\begin{text}
The m_X, m_Y and m_Z members define the \green{position} of a point if we want to use this as a point, or the
 \green{direction} if a \type{Vector3} object represents a direction.
\end{text}
\include{18,19}
\end{part}

\begin{part}
\begin{text}
Three constructors are provided to create new Vector3 objects. 
\begin{enumerate}{â–º}
\item A default constructor which will initialize \\the \type{Vector3} object to {#p}
\item A constructor with 3 parameters \parameter{x}, \parameter{y} and \parameter{z} which will initialize the \type{Vector3} object to
 {&p1&(cs)}.
\item A constructor that creates a vector from a position to another position.
\end{enumerate}
\end{text}
\include{7-9}
\end{part}

\begin{part}
\begin{text}
The \function{Set} member function allows the programmer to change \\the values
 of the \sourcecode{x}, \sourcecode{y} and \sourcecode{z} member variables.
\end{text}
\include{11}
\end{part}

\begin{part}
\begin{text}
The \function{Magnitude} function implements the formula to calculate the magnitude of a vector:
\\ \\
    {$m} = {&m&(sqrt,cs)}
\end{text}
\include{12}
\end{part}

\begin{part}
\begin{text}
The \function{SqrMagnitude} function implements the formula to calculate the \green{squared} magnitude of a vector:
\\ \\
    {$sm} = {&sm}
\end{text}
\include{13}
\end{part}

\begin{part}
\begin{text}
The \function{Normalize} function divides the x, y and z member by the current magnitude of
 the vector:\\ \\

    {$pn} = {&pn&(sqrt,cs)}
\\
As a result, the \type{Vector3} object now has a magnitude of \literalNumber{1}.
\end{text}
\include{14}
\end{part}

\begin{part}
\begin{text}
In some case we do not want to change the data of the \type{Vector3} object. The \function{Normalized} 
function returns a new Vector3 object that is the normalized version of the current
 \type{Vector3} object.
\end{text}
\include{15}
\end{part}

\begin{part}
\begin{text}
Finally, the \function{Dot} function calculates the dot product of two vectors: \\ \\
   {&dp} = {&dp&(inner)} \\
\end{text}
\include{17}
\end{part}


\end{listing}
\end{document}
